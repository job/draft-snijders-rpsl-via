#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import graken, Parser


__version__ = (2014, 12, 27, 16, 0, 45, 5)

__all__ = [
    'rpsl_viaParser',
    'rpsl_viaSemantics',
    'main'
]


class rpsl_viaParser(Parser):
    def __init__(self, whitespace=None, nameguard=True, **kwargs):
        super(rpsl_viaParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            **kwargs
        )

    @graken()
    def _tkn_protocol_(self):
        self._token('protocol')
        self._cut()

    @graken()
    def _tkn_from_(self):
        self._token('from')
        self._cut()

    @graken()
    def _tkn_into_(self):
        self._token('into')
        self._cut()

    @graken()
    def _tkn_to_(self):
        self._token('to')
        self._cut()

    @graken()
    def _tkn_action_(self):
        self._token('action')
        self._cut()

    @graken()
    def _tkn_accept_(self):
        self._token('accept')
        self._cut()

    @graken()
    def _tkn_announce_(self):
        self._token('announce')
        self._cut()

    @graken()
    def _start_(self):

        def block1():
            self._rule_()
        self._positive_closure(block1)

        self.ast['@'] = self.last_node
        self._check_eof()

    @graken()
    def _rule_(self):
        with self._choice():
            with self._option():
                self._token('import-via:')
                self._import_expr_()
                self._cut()
            with self._option():
                self._token('export-via:')
                self._export_expr_()
                self._cut()
            self._error('no available options')

    @graken()
    def _import_expr_(self):
        with self._optional():
            self._afi_()
        self._as_group_()
        self._tkn_from_()
        self._as_group_()
        self._tkn_accept_()
        self._Rest_()

    @graken()
    def _export_expr_(self):
        with self._optional():
            self._afi_()
        self._as_group_()
        self._tkn_to_()
        self._as_group_()
        self._tkn_announce_()
        self._Rest_()

    @graken()
    def _as_group_(self):
        with self._choice():
            with self._option():
                self._asn_()
            with self._option():
                self._as_set_()
            self._error('no available options')

    @graken()
    def _as_set_(self):
        self._pattern(r'AS-[a-zA-Z0-9:-]+')

    @graken()
    def _afi_(self):
        self._token('afi')
        self._cut()
        self._afi_value_()

    @graken()
    def _afi_value_(self):
        with self._choice():
            with self._option():
                self._token('ipv4.unicast')
            with self._option():
                self._token('ipv4.multicast')
            with self._option():
                self._token('ipv4')
            with self._option():
                self._token('ipv6.unicast')
            with self._option():
                self._token('ipv6.multicast')
            with self._option():
                self._token('ipv6')
            with self._option():
                self._token('any')
            with self._option():
                self._token('any.unicast')
            with self._option():
                self._token('any.multicast')
            self._error('expecting one of: any any.multicast any.unicast ipv4 ipv4.multicast ipv4.unicast ipv6 ipv6.multicast ipv6.unicast')

    @graken()
    def _asn_(self):
        self._pattern(r'AS[0-9]{1,10}')
        self._cut()

    @graken()
    def _Rest_(self):
        self._pattern(r'.*$')


class rpsl_viaSemantics(object):
    def tkn_protocol(self, ast):
        return ast

    def tkn_from(self, ast):
        return ast

    def tkn_into(self, ast):
        return ast

    def tkn_to(self, ast):
        return ast

    def tkn_action(self, ast):
        return ast

    def tkn_accept(self, ast):
        return ast

    def tkn_announce(self, ast):
        return ast

    def start(self, ast):
        return ast

    def rule(self, ast):
        return ast

    def import_expr(self, ast):
        return ast

    def export_expr(self, ast):
        return ast

    def as_group(self, ast):
        return ast

    def as_set(self, ast):
        return ast

    def afi(self, ast):
        return ast

    def afi_value(self, ast):
        return ast

    def asn(self, ast):
        return ast

    def Rest(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = rpsl_viaParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in rpsl_viaParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for rpsl_via.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace
    )

